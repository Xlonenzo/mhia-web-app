version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: mhia_postgres
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-mhia_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mhia_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: mhia_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mhia_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mhia_backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-mhia_db}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_DELTA=30
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app:/models
    volumes:
      - ./backend:/app
      - ../modelos:/models
      - uploads:/app/uploads
      - results:/app/results
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mhia_network
    restart: unless-stopped
    command: >
      sh -c "
      alembic upgrade head &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2
      "

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mhia_celery
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-mhia_db}
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app:/models
    volumes:
      - ./backend:/app
      - ../modelos:/models
      - uploads:/app/uploads
      - results:/app/results
    depends_on:
      - redis
      - postgres
    networks:
      - mhia_network
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: mhia_frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mhia_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: mhia_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - mhia_network
    restart: unless-stopped

networks:
  mhia_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  uploads:
  results:
  nginx_logs: